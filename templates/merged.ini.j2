; WWMI BETA-1 INI

{%- macro note(text) %}{% if comment_code %}; {{ text }}{% else %};DEL{% endif %}{% endmacro %}

; Mod State -------------------------

{{note("Global variables used by entire mod")}}
[Constants]
{{note("Allows WWMI to safely disable incompatible mod and notify user about it")}}
global $required_wwmi_version = {{ '%0.2f'| format(mod_info.required_wwmi_version.as_float()) }}
{{note("Number of indices in original model")}}
global $object_guid = {{ extracted_object.index_count }}
{{note("Number of vertices in custom model")}}
global $mesh_vertex_count = {{ merged_object.vertex_count }}
{{note("Number of shapekeyed vertices in custom model")}}
global $shapekey_vertex_count = {{ merged_object.shapekeys.vertex_count }}
{{note("ID assigned to our mod by WWMI")}}
global $mod_id = -1000
{{note("Changes between 0 and 1 with every frame, used to run bone merging only once per frame for every component")}}
global $state_id = 0
{{note("Controls whether our mod is enabled, prevents any overrides from happening if $mod_enabled == 0")}}
{{note("Prevents user from being crash-locked in case of incompatible WWMI version")}}
global $mod_enabled = 0
{{note("Indicates if our object was detected in previous frame")}}
global $object_detected = 0

{{note("List of commands executed for every frame")}}
[Present]
if $object_detected
    if $mod_enabled
        post $object_detected = 0
        run = CommandListUpdateMergedSkeleton
    else
        {{note("Check if our mod is compatible with installed WWMI version (runs only once)")}}
        if $mod_id == -1000
            {{note("Pass required WWMI version along with mod metadata to WWMI")}}
            run = CommandListRegisterMod
        endif
    endif
endif

{{note("Contacts WWMI to check whether installed version is compatible with our mod")}}
[CommandListRegisterMod]
{{note("Pass mod info variables to WWMI")}}
$\WWMIv1\required_wwmi_version = $required_wwmi_version
$\WWMIv1\object_guid = $object_guid
{{note("Pass mod info resources to WWMI")}}
Resource\WWMIv1\ModName = ref ResourceModName
Resource\WWMIv1\ModAuthor = ref ResourceModAuthor
Resource\WWMIv1\ModDesc = ref ResourceModDesc
Resource\WWMIv1\ModLink = ref ResourceModLink
Resource\WWMIv1\ModLogo = ref ResourceModLogo
{{note("Register mod in WWMI")}}
run = CommandList\WWMIv1\RegisterMod
{{note("Read mod_id assigned to our mod by WWMI, incompatible mod will get `$mod_id == -1` assigned")}}
$mod_id = $\WWMIv1\mod_id
{{note("Enable our mod if WWMI assigned valid $mod_id to it")}}
if $mod_id >= 0
    $mod_enabled = 1
endif

{{note("Copes hard to make merged skeleton work with WuWa 1.1 pipeline")}}
[CommandListUpdateMergedSkeleton]
{{note("Changes between 0 and 1 with every frame, used to run bone merging only once per frame for every component")}}
if $state_id
    $state_id = 0
else
    $state_id = 1
endif
{{note("Copy skeleton merged in previous frame to new buffer so we could force it to vs-cb4 slot")}}
ResourceMergedSkeleton = copy ResourceMergedSkeletonRW
{{note("Copy extra skeleton merged in previous frame to new buffer so we could force it to vs-cb3 slot")}}
{{note("Yes, skeletons in vs-cb3 and vs-cb4 are slightly different, so we need to merge both for AA and outlines to work correctly")}}
ResourceExtraMergedSkeleton = copy ResourceExtraMergedSkeletonRW

; Resources: Mod Info -------------------------

{{note("Name of mod")}}
[ResourceModName]

{%- if mod_info.mod_name.strip() != '' %}
type = Buffer
data = "{{ mod_info.mod_name }}"
{%- else %}
; type = Buffer
; data = "Unknown Mod Name"
{%- endif %}

{{note("Name of mod author")}}
[ResourceModAuthor]
{%- if mod_info.mod_author.strip() != '' %}
type = Buffer
data = "{{ mod_info.mod_author }}"
{%- else %}
; type = Buffer
; data = "Unknown Mod Author"
{%- endif %}

{{note("Mod description")}}
[ResourceModDesc]
{%- if mod_info.mod_desc.strip() != '' %}
type = Buffer
data = "{{ mod_info.mod_desc }}"
{%- else %}
; type = Buffer
; data = "Empty Mod Description"
{%- endif %}

{{note("Link to mod repository")}}
[ResourceModLink]
{%- if mod_info.mod_link.strip() != '' %}
type = Buffer
data = "{{ mod_info.mod_link }}"
{%- else %}
; type = Buffer
; data = "Empty Mod Link"
{%- endif %}

{{note("Texture file with 512x512 .dds (BC7 SRGB) mod logo")}}
[ResourceModLogo]
{%- if mod_info.mod_logo.is_file() %}
filename = Textures/Logo.dds
{%- else %}
; filename = Textures/Logo.dds
{%- endif %}

; Shading: Draw Call Stacks Processing -------------------------

{{note("Marks Bones Data CB resource with arbitrary value 3381.7777")}}
[TextureOverrideMarkBoneDataCB]
hash = {{ extracted_object.cb4_hash }}
match_priority = 0
filter_index = 3381.7777

{{note("Update ResourceMergedSkeletonRW with bones data of current component")}}
[CommandListMergeSkeleton]
{{note("Set custom scale for skeleton, changing size of the entire model")}}
$\WWMIv1\custom_mesh_scale = {{ '%0.2f'| format(skeleton_scale) }}
{{note("Pass constant buffer with real bone data to copy bones from")}}
cs-cb8 = ref vs-cb4
{{note("Pass buffer that gonna store real bone data of all components")}}
cs-u6 = ResourceMergedSkeletonRW
{{note("Run Skeleton Merger CS to merge real bone data of current component into ResourceMergedSkeletonRW")}}
run = CustomShader\WWMIv1\SkeletonMerger
{{note("Pass constant buffer with Anti-Aliasing bone data to copy bones from")}}
cs-cb8 = ref vs-cb3
{{note("Pass buffer that gonna store Anti-Aliasing bone data of all components")}}
cs-u6 = ResourceExtraMergedSkeletonRW
{{note("Run Skeleton Merger CS to merge Anti-Aliasing bone data of current component into ResourceExtraMergedSkeletonRW")}}
run = CustomShader\WWMIv1\SkeletonMerger

{{note("Overrides textures via triggering [ResourceTextureX] sections by calling chechtextureoverride on ps-t slots")}}
[CommandListTriggerResourceOverrides]
{{note("Trigger texture sections to replace texture with matching hash")}}
CheckTextureOverride = ps-t0
CheckTextureOverride = ps-t1
CheckTextureOverride = ps-t2
CheckTextureOverride = ps-t3
CheckTextureOverride = ps-t4
CheckTextureOverride = ps-t5
CheckTextureOverride = ps-t6
CheckTextureOverride = ps-t7
{{note("Trigger callbacks on bone data CBs to assign them filter_index")}}
{{note("These buffers cannot be replaced directly via `this` as their hash is widely used by many objects")}}
CheckTextureOverride = vs-cb3
CheckTextureOverride = vs-cb4

{{note("Overrides resources that are shared between VS calls")}}
[CommandListOverrideSharedResources]
{{note("Store pointer to original buffer to restore original context on cleanup")}}
ResourceBypassVB0 = ref vb0
{{note("Override resources to make draw calls use custom meshes")}}
ib = ResourceIndexBuffer
{% if unrestricted_custom_shape_keys and merged_object.shapekeys.vertex_count > 0 -%}
vb0 = ResourceShapeKeyedPosition
{%- else -%}
vb0 = ResourcePositionBuffer
{%- endif %}
vb1 = ResourceVectorBuffer
vb2 = ResourceTexcoordBuffer
vb3 = ResourceColorBuffer
vb4 = ResourceBlendBuffer
{%- if unrestricted_custom_shape_keys and merged_object.shapekeys.vertex_count > 0 %}
vb6 = null
{%- endif %}
{{note("Pass merged skeleton is resource matches marked Bones Data CB")}}
if vs-cb3 == 3381.7777
    vs-cb3 = ResourceExtraMergedSkeleton
endif
if vs-cb4 == 3381.7777
    vs-cb4 = ResourceMergedSkeleton
endif

{{note("Overrides resources that are shared between VS calls")}}
[CommandListCleanupSharedResources]
{{note("Restore original vb0 so we can use its hash to match next call")}}
vb0 = ref ResourceBypassVB0

{%- for component in extracted_object.components %}

{{note("Override draw calls for Component %d" | format(loop.index0))}}
[TextureOverrideComponent{{ loop.index0 }}]
hash = {{ extracted_object.vb0_hash }}
match_first_index = {{ component.index_offset }}
match_index_count = {{ component.index_count }}
{% if loop.index0 == 0 -%}
{{note("Signal our mod that object is found on screen and we can start overriding it")}}
$object_detected = 1
{% endif -%}
if $mod_enabled
    local $state_id_{{ loop.index0 }}
    {{note("Limit bone merging to 1 time per frame")}}
    if $state_id_{{ loop.index0 }} != $state_id
        {{note("$state_id changes between 0 and 1 every frame")}}
        $state_id_{{ loop.index0 }} = $state_id
        {{note("Pass variables for SkeletonMerger CS")}}
        $\WWMIv1\vg_offset = {{ extracted_object.components[loop.index0].vg_offset }}
        $\WWMIv1\vg_count = {{ extracted_object.components[loop.index0].vg_count }}
        {{note("Merge bones of this components into ResourceMergedSkeleton")}}
        run = CommandListMergeSkeleton
    endif
    {{note("Override draw call if we have merged skeleton ready")}}
    if ResourceMergedSkeleton !== null
    {%- if merged_object.components[loop.index0].objects | length > 0 %}
        {{note("Skip original draw call")}}
        handling = skip
        {{note("Trigger by-hash resource overrides")}}
        run = CommandListTriggerResourceOverrides
        {{note("Do by-slot resource overrides")}}
        run = CommandListOverrideSharedResources
    {%- for obj in merged_object.components[loop.index0].objects %}
        ; Draw {{ obj.name }}
        drawindexed = {{ obj.index_count }}, {{ obj.index_offset }}, 0
    {%- endfor %}
        {{note("Restore required parts of original context")}}
        run = CommandListCleanupSharedResources
    {%- else %}
        {{note("Skip original draw call")}}
        handling = skip
        {{note("Trigger by-hash resource overrides")}}
        ; run = CommandListTriggerResourceOverrides
        {{note("Do by-slot resource overrides")}}
        ; run = CommandListOverrideSharedResources
        ; Draw skipped: No matching custom components found
        {{note("Restore required parts of original context")}}
        ; run = CommandListCleanupSharedResources
    {%- endif %}
    endif
endif

{%- endfor %}

; Shading: Textures -------------------------

{%- for texture in textures %}

[ResourceTexture{{ loop.index0 }}]
filename = Textures/{{ texture.filename }}

[TextureOverrideTexture{{ loop.index0 }}]
hash = {{ texture.hash }}
match_priority = 0
this = ResourceTexture{{ loop.index0 }}
{%- endfor %}

{% if merged_object.shapekeys.vertex_count > 0 -%}
; Skinning: Shape Keys Override -------------------------

{{note("Increases size of UAV that stores shapekeyed vertices xyz offsets to support more vertices than original")}}
[TextureOverrideShapeKeyOffsets]
hash = {{ extracted_object.shapekeys.offsets_hash }}
match_priority = 0
override_byte_stride = 24
override_vertex_count = $mesh_vertex_count

{{note("Increases size of UAV that stores shapekeyed vertices multipliers to support more vertices than original")}}
[TextureOverrideShapeKeyScale]
hash = {{ extracted_object.shapekeys.scale_hash }}
match_priority = 0
override_byte_stride = 4
override_vertex_count = $mesh_vertex_count

{{note("Updates ResourceShapeKeyCBRW that stores offsets of shapekeyed vertex lists, shape key values and multipliers")}}
[CommandListSetupShapeKeys]
{{note("Pass 4 byte checksum of shapekey offsets to ensure that we only modify expected values")}}
$\WWMIv1\shapekey_checksum = {{ extracted_object.shapekeys.checksum }}
{{note("Pass buffer with offsets for vertex lists of every shape key of custom model")}}
cs-t33 = ResourceShapeKeyOffsetBuffer
{{note("Pass buffer with custom values for every shape key, allows to control both custom and stock")}}
cs-u5 = ResourceCustomShapeKeyValuesRW
{{note("Pass buffer that gonna store result of calculations, required for Shape Key Loader CS to run")}}
cs-u6 = ResourceShapeKeyCBRW
{{note("Run ShapeKeyOverrider CS")}}
run = CustomShader\WWMIv1\ShapeKeyOverrider

{{note("Runs custom Shape Key Loader CS to, well, load shapekeys data from buffers")}}
[CommandListLoadShapeKeys]
{{note("Pass number of shapekeyed vertices to adjust required threads count via dipatch_y")}}
$\WWMIv1\shapekey_vertex_count = $shapekey_vertex_count
{{note("Pass buffer with lists of per-vertex ids for every shape key")}}
cs-t0 = ResourceShapeKeyVertexIdBuffer
{{note("Pass buffer with lists of xyz per-vertex offsets for every shape key")}}
cs-t1 = ResourceShapeKeyVertexOffsetBuffer
{{note("Pass buffer with shape key vertex lists offsets, and shape key values & multipliers")}}
cs-u6 = ResourceShapeKeyCBRW
{{note("Run ShapeKeyLoader CS")}}
run = CustomShader\WWMIv1\ShapeKeyLoader

{{note("Handles WWMI callback fired on original Shape Key Loader CS call")}}
[TextureOverrideShapeKeyLoaderCallback]
hash = {{ extracted_object.shapekeys.offsets_hash }}
match_priority = 0
if $mod_enabled
    {{note("Ensure that callback has WWMI filter_index of Shape Key Loader CS assigned")}}
    if cs == 3381.3333 && ResourceMergedSkeleton !== null
        {{note("It looks like we can skip checking for THREAD_GROUP_COUNT_Y as UAV hashes are unique for each object")}}
        {{note("Ensures that dispatch_y of Shape Key Loader CS call matches one from dump")}}
        {{note("if THREAD_GROUP_COUNT_Y == %d" | format(extracted_object.shapekeys.dispatch_y))}}
        {{note("Skip handling of original Shape Key Loader CS call to modify dispatch_y value")}}
        handling = skip
        {{note("Run custom Shape Key Overrider CS to prepare shape key resources for loading")}}
        run = CommandListSetupShapeKeys
        {{note("Run custom Shape Key Loader CS to load shape key resources")}}
        run = CommandListLoadShapeKeys
        {{note("endif")}}
    endif
endif

{{note("Runs custom Shape Key Loader CS to, well, load shapekeys data from buffers")}}
[CommandListMultiplyShapeKeys]
{{note("Pass number of shapekeyed vertices to adjust required threads count via dipatch_y")}}
$\WWMIv1\custom_vertex_count = $mesh_vertex_count
{{note("Run custom Shape Key Multiplier CS to set deformation intensity")}}
run = CustomShader\WWMIv1\ShapeKeyMultiplier
{% if unrestricted_custom_shape_keys %}
{{note("Runs custom Shape Key Applier CS to apply calculated offsets to xyz position data, allowing to shapekey all components")}}
[CommandListApplyShapeKeys]
{{note("Pass buffer with per-vertex position data")}}
cs-t6 = ResourcePositionBuffer
{{note("Pass buffer to store calculation results")}}
cs-u6 = ResourcePositionRW
{{note("Run custom Shape Key Applier CS to add xyz offsets to position data")}}
run = CustomShader\WWMIv1\ShapeKeyApplier
{{note("Copy result to new buffer so we can force it to vb0 slot")}}
ResourceShapeKeyedPosition = copy ResourcePositionRW
{% endif %}
{{note("Handles WWMI callback fired on original Shape Key Multiplier CS call")}}
[TextureOverrideShapeKeyMultiplierCallback]
hash = {{ extracted_object.shapekeys.offsets_hash }}
match_priority = 0
if $mod_enabled
    {{note("Ensure that callback has WWMI filter_index of Shape Key Multiplier CS assigned")}}
    if cs == 3381.4444 && ResourceMergedSkeleton !== null
        {{note("It looks like we can skip checking for THREAD_GROUP_COUNT_Y as UAV hashes are unique for each object")}}
        {{note("Ensures that dispatch_y of Shape Key Multiplier CS call matches one from dump")}}
        {{note("if THREAD_GROUP_COUNT_Y == shapekeys.multiplier_dispatch_y")}}
        {{note("Skip handling of original Shape Key Multiplier CS call to modify dispatch_y value")}}
        handling = skip
        {{note("Run custom Shape Key Multiplier CS to apply dynamic per-character multipliers")}}
        run = CommandListMultiplyShapeKeys
        {%- if unrestricted_custom_shape_keys and merged_object.shapekeys.vertex_count > 0 %}
        {{note("Runs custom Shape Key Applier CS to apply calculated offsets to xyz position data")}}
        run = CommandListApplyShapeKeys
        {%- endif %}
        {{note("endif")}}
    endif
endif

; Resources: Shape Keys Override -------------------------
{% if unrestricted_custom_shape_keys %}
{{note("Stores copy of ResourcePositionRW to force it into VB0")}}
[ResourceShapeKeyedPosition]

{{note("Stores position data with applied per-vertex xyz offsets resulted from shape keys calculations")}}
[ResourcePositionRW]
type = RWBuffer
format = R32_FLOAT
stride = 12
array = {{12 * merged_object.shapekeys.vertex_count}}
{% endif %}
{{note("Stores dynamically calculated CB required to override original Shape Keys CS call")}}
[ResourceShapeKeyCBRW]
{{note("Contains 128+128+8 values:")}}
{{note("* 128 uint: Shape Key offsets (continuous lists of vertex offsets)")}}
{{note("* 128 unorm: Shape Key values (range [0.0, 1.0])")}}
{{note("* 8 uint: Shape Key CS settings")}}
type = RWBuffer
format = R32G32B32A32_UINT
{{note("32 shapekey offsets, 32 shapekey values, 2 control flags")}}
array = 66

{{note("Stores values of custom Shape Keys and overrides for original ones")}}
[ResourceCustomShapeKeyValuesRW]
{{note("Contains 128 values, zero is shifted by 1.0 to the right")}}
{{note("Expected value range is [1.0, 2.0]")}}
{{note("* `0.0` means `no override`")}}
{{note("* `1.0` means `override with zero`")}}
{{note("* `2.0` means `override with one`")}}
type = RWBuffer
format = R32G32B32A32_FLOAT
{{note("32 elements, 4 floats per element")}}
array = 32
{%- endif %}

; Resources: Skeleton Override -------------------------

{{note("Stores a copy of full skeleton merged in previous frame")}}
[ResourceMergedSkeleton]

{{note("Stores merged skeleton consisting of bones from all components, allows to make VG weights global")}}
[ResourceMergedSkeletonRW]
{{note("Contains up to 256 bones")}}
type = RWBuffer
format = R32G32B32A32_FLOAT
{{note("256 bones, 3 elements per bone, 4 floats per element")}}
array = 768

{{note("Stores a copy of full extra skeleton merged in previous frame")}}
[ResourceExtraMergedSkeleton]

{{note("Stores additional merged skeleton used by some shaders like Anti Aliasing")}}
[ResourceExtraMergedSkeletonRW]
{{note("Contains up to 256 bones")}}
type = RWBuffer
format = R32G32B32A32_FLOAT
{{note("256 bones, 3 elements per bone, 4 floats per element")}}
array = 768

; Resources: Buffers -------------------------

{{note("Stores pointer to original vb0")}}
[ResourceBypassVB0]

{%- for buffer_name, buffer in buffers.items() %}

[Resource{{ buffer_name }}Buffer]
type = Buffer
format = {{ buffer.layout.semantics[0].get_format() }}
stride = {{ buffer.layout.stride }}
filename = Meshes/{{ buffer_name }}.buf

{%- endfor %}

; Autogenerated -------------------------

; This mod.ini was automatically generated by WWMI Tools Blender addon v{{mod_info.wwmi_tools_version}} and requires WWMI v{{mod_info.required_wwmi_version}}+ to function
; WWMI GameBanana: https://gamebanana.com/tools/17252
; WWMI Tools GameBanana: https://gamebanana.com/tools/17289
; WWMI GitHub: https://github.com/SpectrumQT/WWMI
; WWMI Tools GitHub: https://github.com/SpectrumQT/WWMI_Tools
; AGMG Modding Community Discord: https://discord.com/invite/agmg
